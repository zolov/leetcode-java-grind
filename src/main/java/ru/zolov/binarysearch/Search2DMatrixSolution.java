package ru.zolov.binarysearch;

/**
 * @author skaiur
 */
public class Search2DMatrixSolution {

    public static boolean searchMatrix(int[][] matrix, int target) {
        // Создаем переменную с кол-вом рядов
        final int ROWS = matrix.length;
        // Создаем переменную с кол-вом колонок
        final int COLS = matrix[0].length;

        // Создаем переменную для верхнего ряда
        int top = 0;
        // Создаем переменную для нижнего ряда
        int bot = ROWS - 1;
        // Пока индекс верхнего меньше или равен нижнему
        while (top <= bot) {
            // Вычисляем индекса ряда в середине массива (по вертикали)
            /*
            1. [a, b, c]
            2. [d, e, f] <--
            3. [j, k, l]
             */
            int midRow = (top + bot) / 2;
            // Если искомое число больше числа f (или числа в последней колонке массива в середине матрицы)
            if (target > matrix[midRow][COLS - 1]) {
                // сдвигаем верхний указатель top середину, но так как там мы уже провели то еще плюс 1 позицию
                top = midRow + 1;
                // Иначе, если искомое число меньше числа d (или числа в первой колонке массива в середине матрицы)
            } else if (target < matrix[midRow][0]) {
                // сдвигаем нижний указатель bot середину, но так как там мы уже провели то еще минус 1 позицию
                bot = midRow - 1;
            } else {
                // Иначе прерываем выполнения цикла, так как мы нашли нужны ряд (нужный диапазон чисел)
                break;
            }
        }

        // если указатели top и bot пересекли друг друга, то возвращаем false, это значит что мы не нашли ряд с нужным числом
        if (bot < top) {
            return false;
        }

        // Создаем левый и правый указатель
        // l = первой колонке
        int l = 0;
        // r = самое правой колонке
        int r = COLS - 1;

        // Используем ранее вычисленный ряд
        var row = matrix[(top + bot) / 2];
        // Пока левый и правый указатель не пересекутся
        while (l <= r) {
            // вычисляем колонку в середине ряда
            int m = (l + r) / 2;
            // если искомое число больше числа в середине
            if (target > row[m]) {
                // то сдвигаем левый указатель в середину, но так как там мы уже провели, то еще на одну позицию правее
                l = m + 1;
                // если искомое число меньше числа в середине
            } else if (target < row[m]) {
                // то сдвигаем правый указатель в середину, но так как там мы уже провели, то еще на одну позицию левее
                r = m - 1;
                // если искомое число и число под указателем m равны
            } else {
                // возвращаем true
                return true;
            }
        }

        // если не нашли искомое число в матрице, то возвращаем false
        return false;
    }

    public static void main(String[] args) {
        var target = 3;
        var matrix = new int[][]{
                {1, 3, 5, 7},
                {10, 11, 16, 20},
                {23, 30, 34, 60}
        };

        System.out.println(searchMatrix(matrix, target));

    }
}
